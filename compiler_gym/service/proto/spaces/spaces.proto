// The CompilerGym service interface description.
//
// Copyright (c) Facebook, Inc. and its affiliates.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.

syntax = "proto3";

package compiler_gym.spaces;

option cc_enable_arenas = true;
option go_package = "spacespb";
option java_multiple_files = true;
option java_outer_classname = "SpacesProto";
option java_package = "com.compiler_gym.spaces";

import "google/protobuf/any.proto";
import "observation.proto";

// The [min, max] range of a boolean scalar.
message BooleanRange {
  // The minimum value (inclusive). If not set, the value is 0 (false).
  bool min = 1;
  // The maximum value (inclusive). If not set, the value is 1 (true).
  bool max = 2;
}

// The [min, max] range of an int64 scalar.
message Int64Range {
  // The minimum value (inclusive). If not set, the value is -2^63.
  int64 min = 1;
  // The maximum value (inclusive). If not set, the value is 2^63 - 1.
  int64 max = 2;
}

// The [min, max] range of an double scalar.
message DoubleRange {
  // The minimum value (inclusive). If not set, the value is -inf.
  double min = 1;
  // The maximum value (inclusive). If not set, the value is +inf.
  double max = 2;
}

message BooleanBox {
  repeated int64 shape = 1;
  // Flattened tensors of shape `shape` with C-like index order.
  repeated bool low = 2;
  repeated bool high = 3;
}

message Int64Box {
  repeated int64 shape = 1;
  // Flattened tensors of shape `shape` with C-like index order.
  repeated int64 low = 2;
  repeated int64 high = 3;
}

message DoubleBox {
  repeated int64 shape = 1;
  // Flattened tensors of shape `shape` with C-like index order.
  repeated double low = 2;
  repeated double high = 3;
}

// A list of spaces.
message Tuple {
  repeated Space tuple = 1;
}

message Dict {
  map<string, Space> dict = 3;
}

// A discrete space in :math:`{ 0, 1, \\dots, n-1 }`.
message Discrete {
  int64 n = 1;
}

// A discrete space in which every point in the space is named. This can be used
// for representing enumerations.
message NamedDiscrete {
  // A list of names for every value in the space. The order in which these
  // values are returned is used.
  repeated string items = 2;
}

message Int64Sequence {
  Int64Range length_range = 1;
  Int64Range scalar_range = 2;
}

message DoubleSequence {
  Int64Range length_range = 1;
  DoubleRange scalar_range = 2;
}

message BooleanSequence {
  Int64Range length_range = 1;
  BooleanRange scalar_range = 2;
}

message Space {
  string name = 1;
  oneof value {
    Tuple tuple = 3;
    Dict dict = 4;
    Discrete discrete = 5;
    NamedDiscrete named_discrete = 6;
    BooleanRange boolean_value = 7;
    Int64Range int64_value = 8;
    DoubleRange double_value = 9;
    BooleanSequence boolean_sequence = 10;
    Int64Sequence int64_sequence = 11;
    DoubleSequence double_sequence = 12;
    BooleanBox boolean_box = 13;
    Int64Box int64_box = 14;
    DoubleBox double_box = 15;
    google.protobuf.Any custom_value = 16;
    // TODO(boian): maybe add byte and float variants for sequences, boxes and ranges.

  }
}

message Observation {
  Space space = 1;
  // An optional string describing an opaque data format, e.g. a data structure
  // that is serialized to a string/binary array for transmission back to the
  // client. It is up to the client and service to agree on how to decode
  // observations using this value. For example, an opaque_data_format of
  // "string_json" could be used to indicate that the observation is a
  // string-serialized JSON value.
  string opaque_data_format = 6;
  // Whether the observation space is deterministic.
  bool deterministic = 7;
  // Whether the observations depend on the service execution environment.
  bool platform_dependent = 8;
  // A default observation. This value should be used by the client in lieu
  // of a true observation if the compiler service terminates abruptly, such as
  // a crash while applying an action.
  compiler_gym.Observation default_value = 9;
}

message Action {
  Space space = 1;
}
